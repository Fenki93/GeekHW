from functools import reduce
from itertools import count
from itertools import cycle
from itertools import count
from math import factorial


# 1
# Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

def do_salary():
    try:
        time = float(input('Выработка в часах: '))
        salary = int(input('Ставка: '))
        bonus = int(input('Премия: '))
        res = time * salary + bonus
        print(f'заработная плата сотрудника:  {res}')
    except ValueError:
        return print('Not a number')


do_salary()

# 2
# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента


my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
my_new_list = [el for el in my_list if el > my_list[my_list.index(el) - 1]]
print(f'Исходный список {my_list}')
print(f'Новый список {my_new_list}')

# 3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.

print(f'Числа от 20 до 240 кратные 20 или 21 - {[el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]}')

# 4
# Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел,
# соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.

my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = [el for el in my_list if my_list.count(el) == 1]
print(new_list)

# 5
# Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.

my_list = [el for el in range(100, 1001) if el % 2 == 0]

print(reduce(lambda x, y: x * y, my_list))
# 6
# бесконечный итератор, генерирующий целые числа, начиная с указанного


for el in count(int(input('Введите стартовое число '))):
    print(el)  # внимание - беконечный цикл!

# бесконечный итератор, повторяющий элементы некоторого списка, определенного заранее.

my_list = ["Dada", '123', 8556, True, None]
for el in cycle(my_list):
    print(el)


# 7
# Реализовать генератор с помощью функции с ключевым
# словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом:
# for el in fibo_gen().
# Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые 15 чисел.

def fibo_gen():
    for el in count(1):
        yield factorial(el)


gen = fibo_gen()
x = 0
for i in gen:
    if x < 15:
        print(i)
        x += 1
    else:
        break
